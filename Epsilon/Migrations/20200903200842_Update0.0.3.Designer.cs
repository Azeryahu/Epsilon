// <auto-generated />
using System;
using Epsilon;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Epsilon.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200903200842_Update0.0.3")]
    partial class Update003
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Epsilon.Industry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PartName");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("UserID")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.Property<string>("Username");

                    b.HasKey("ID");

                    b.ToTable("Indy");
                });

            modelBuilder.Entity("Epsilon.Job", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Coordinates");

                    b.Property<DateTimeOffset?>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<string>("JobClass");

                    b.Property<decimal>("JobHeadID")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.Property<string>("JobHeadUsername");

                    b.Property<bool>("JobStatus");

                    b.Property<string>("JobType");

                    b.Property<int>("NumberOfGroups");

                    b.Property<DateTimeOffset?>("StartDate");

                    b.Property<int>("TotalNumberOfSlots");

                    b.HasKey("ID");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Epsilon.Job+Group", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("GroupLeadID")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.Property<string>("GroupLeadUsername");

                    b.Property<string>("GroupName");

                    b.Property<bool>("GroupStatus");

                    b.Property<string>("JobClass");

                    b.Property<string>("JobType");

                    b.Property<int>("NumberOfTeams");

                    b.HasKey("ID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Epsilon.Job+Group+Team", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JobClass");

                    b.Property<string>("JobType");

                    b.Property<int>("NumbeOfSlots");

                    b.Property<decimal>("TeamLeadID")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.Property<string>("TeamLeadUsername");

                    b.Property<string>("TeamName");

                    b.Property<bool>("TeamStatus");

                    b.HasKey("ID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Epsilon.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Branch");

                    b.Property<bool>("CanJoin");

                    b.Property<int>("CompletedMissions");

                    b.Property<int>("CrewID");

                    b.Property<string>("CrewName");

                    b.Property<string>("CurrentGroupName");

                    b.Property<string>("CurrentOpName");

                    b.Property<string>("CurrentOpType");

                    b.Property<string>("CurrentTeamName");

                    b.Property<int>("DaysUntilPromotion");

                    b.Property<decimal>("DiscordId")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.Property<string>("DiscordUserID");

                    b.Property<string>("DiscordUsername");

                    b.Property<string>("DualUsername");

                    b.Property<DateTimeOffset?>("FactionJoinDate");

                    b.Property<string>("Grade");

                    b.Property<bool>("JoinedFaction");

                    b.Property<DateTimeOffset?>("LastMessageRecieved");

                    b.Property<int>("NumberOfAttempts");

                    b.Property<int>("NumberOfWarnings");

                    b.Property<float>("PersonalStanding");

                    b.Property<DateTimeOffset?>("PromotionDate");

                    b.Property<int>("PromotionPointBalance");

                    b.Property<string>("Rank");

                    b.Property<DateTimeOffset?>("ServerJoinDate");

                    b.Property<string>("SteamID");

                    b.Property<string>("SteamUsername");

                    b.Property<string>("VerificationKey");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
